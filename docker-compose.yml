version: '3.8'
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: healthcarebackend-api-1
    ports:
      - "8088:8088"
      - "5555:5555"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/userdb?schema=public
      POSTGRES_PASSWORD: postgres
      NODE_ENV: development
      APP_ENV: development
      IS_DEV: 'true'
      RESET_DB: 'true'
      PRISMA_SCHEMA_PATH: ./src/shared/database/prisma/schema.prisma
      # Rate limiting configuration
      RATE_LIMIT_ENABLED: 'true'
      API_RATE_LIMIT: '1000'
      AUTH_RATE_LIMIT: '50'
      HEAVY_RATE_LIMIT: '100'
      USER_RATE_LIMIT: '500'
      HEALTH_RATE_LIMIT: '2000'
      MAX_AUTH_ATTEMPTS: '50'
      AUTH_ATTEMPT_WINDOW: '18000'
      MAX_CONCURRENT_SESSIONS: '50'
      SESSION_INACTIVITY_THRESHOLD: '9000'
      # Email configuration
      EMAIL_HOST: sandbox.smtp.mailtrap.io
      EMAIL_PORT: 2525
      EMAIL_SECURE: false
      EMAIL_USER: ff5bb55c43b528
      EMAIL_PASSWORD: e76ae4c723b5d4
      EMAIL_FROM: noreply@healthcare.com
      # CORS configuration
      CORS_ORIGIN: http://localhost:8088,http://localhost:5050,http://localhost:8082
      CORS_CREDENTIALS: true
      CORS_METHODS: GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS
      # Security configuration
      SECURITY_RATE_LIMIT: true
      SECURITY_RATE_LIMIT_MAX: 1000
      SECURITY_RATE_LIMIT_WINDOW_MS: 150
      TRUST_PROXY: 1
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userdb
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: healthcarebackend-redis-1
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: healthcarebackend-redis-commander-1
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8081 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
 