version: '3.8'
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: healthcarebackend-api-1
    ports:
      - "3000:3000"
      - "5555:5555"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/userdb?schema=public
      POSTGRES_PASSWORD: postgres
      NODE_ENV: development
      APP_ENV: development
      IS_DEV: 'true'
      PRISMA_SCHEMA_PATH: ./src/shared/database/prisma/schema.prisma
      # Rate limiting configuration
      RATE_LIMIT_ENABLED: 'true'
      API_RATE_LIMIT: '1000'
      AUTH_RATE_LIMIT: '50'
      HEAVY_RATE_LIMIT: '100'
      USER_RATE_LIMIT: '500'
      HEALTH_RATE_LIMIT: '2000'
      MAX_AUTH_ATTEMPTS: '50'
      AUTH_ATTEMPT_WINDOW: '18000'
      MAX_CONCURRENT_SESSIONS: '50'
      SESSION_INACTIVITY_THRESHOLD: '9000'
      # Disable Kafka partitioner warning
      KAFKAJS_NO_PARTITIONER_WARNING: 1
      # Kafka configuration
      KAFKA_BROKERS: kafka:9092
      KAFKA_CLIENT_ID: healthcare-api
      KAFKA_GROUP_ID: healthcare-api-group
      # Email configuration
      EMAIL_HOST: sandbox.smtp.mailtrap.io
      EMAIL_PORT: 2525
      EMAIL_SECURE: false
      EMAIL_USER: ff5bb55c43b528
      EMAIL_PASSWORD: e76ae4c723b5d4
      EMAIL_FROM: noreply@healthcare.com
      # CORS configuration
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
      CORS_CREDENTIALS: true
      CORS_METHODS: GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS
      # Security configuration
      SECURITY_RATE_LIMIT: true
      SECURITY_RATE_LIMIT_MAX: 1000
      SECURITY_RATE_LIMIT_WINDOW_MS: 150
      TRUST_PROXY: 1
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - .:/app
      - /app/node_modules
    command: >
      sh -c "npx prisma generate --schema=./src/shared/database/prisma/schema.prisma &&
             npx prisma migrate deploy --schema=./src/shared/database/prisma/schema.prisma &&
             npx prisma studio --schema=./src/shared/database/prisma/schema.prisma &
             npm run start:dev"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userdb
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: healthcarebackend-redis-1
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: healthcarebackend-redis-commander-1
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=redis
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - app-network
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
 