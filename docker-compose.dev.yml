# Development environment with host-level Nginx handling routing/SSL
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: healthcarebackend-api-dev
    ports:
      - "8088:8088"
      - "5555:5555"
    env_file:
      - .env.development
    environment:
      NODE_ENV: development
      APP_ENV: development
      IS_DEV: true
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/userdb?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379
      PRISMA_SCHEMA_PATH: /app/src/shared/database/prisma/schema.prisma
      NODE_OPTIONS: "--max-old-space-size=2048"
      HOST: 0.0.0.0
      BIND_ADDRESS: 0.0.0.0
      BASE_URL: http://localhost:8088
      API_URL: http://localhost:8088
      REDIS_COMMANDER_URL: http://redis-commander:8081
      PRISMA_STUDIO_URL: http://api:5555
      PGADMIN_URL: http://pgadmin:80
    volumes:
      - .:/app
      - /app/node_modules
      - ./prisma:/app/prisma
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      app-network:
        aliases:
          - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        while ! nc -z postgres 5432; do sleep 1; done &&
        echo 'PostgreSQL is ready!' &&
        echo 'Setting up NestJS application...' &&
        mkdir -p /app/dist/shared/database/prisma &&
        cp -r /app/src/shared/database/prisma/schema.prisma /app/dist/shared/database/prisma/ &&
        echo 'Generating Prisma Client...' &&
        npx prisma generate --schema=/app/src/shared/database/prisma/schema.prisma &&
       
        echo 'Seeding database...' &&
        npx prisma db seed &&
        echo 'Starting NestJS in development mode...' &&
        cd /app &&
        npm run start:dev &
        echo 'Starting Prisma Studio...' &&
        sleep 5 &&
        npx prisma studio --schema=/app/src/shared/database/prisma/schema.prisma --port 5555 --hostname 0.0.0.0
      "

  postgres:
    image: postgres:16
    container_name: postgres-dev
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userdb
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 256MB
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data/pgdata
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    command: >
      postgres -c max_connections=100 
      -c shared_buffers=256MB 
      -c effective_cache_size=768MB 
      -c maintenance_work_mem=64MB 
      -c checkpoint_completion_target=0.9 
      -c wal_buffers=16MB 
      -c default_statistics_target=100 
      -c random_page_cost=1.1 
      -c effective_io_concurrency=200 
      -c work_mem=4MB 
      -c min_wal_size=1GB 
      -c max_wal_size=4GB

  redis:
    image: redis:7
    container_name: redis-dev
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    sysctls:
      net.core.somaxconn: 1024
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander-dev
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8081 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-dev
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data_dev:
    driver: local
    name: healthcare_postgres_data_dev
  redis_data:
    driver: local
    name: healthcare_redis_data_dev
  pgadmin_data:
    driver: local
    name: healthcare_pgadmin_data_dev

networks:
  app-network:
    driver: bridge
    name: healthcare_network_dev 