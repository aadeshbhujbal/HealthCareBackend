services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - BUILDKIT_INLINE_CACHE=1
        - NPM_VERSION=11.3.0
      cache_from:
        - type=registry,ref=node:20-alpine
    container_name: latest-api
    hostname: api
    ports:
      - "${API_PORT:-8088}:${API_PORT:-8088}" # API port
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - /etc/letsencrypt:/etc/letsencrypt:ro # Add read-only access to Let's Encrypt certificates
    environment:
      NODE_ENV: production
      CORS_ORIGIN: "*"
      FRONTEND_URL: https://ishswami.in
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/userdb?schema=public&connection_limit=50&pool_timeout=60&statement_timeout=60000&idle_in_transaction_session_timeout=60000&connect_timeout=60&pool_size=20&max_connections=50
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TRUST_PROXY: 1
      PRISMA_SCHEMA_PATH: /app/src/shared/database/prisma/schema.prisma
      HOST: 0.0.0.0
      PORT: ${API_PORT:-8088}
      BIND_ADDRESS: 0.0.0.0
      SOCKET_HOST: 0.0.0.0
      SOCKET_PORT: ${API_PORT:-8088}
      NPM_CONFIG_LOGLEVEL: error
      API_URL: https://api.ishswami.in
      SWAGGER_URL: /docs
      BULL_BOARD_URL: /queue-dashboard
      SOCKET_URL: /socket.io
      LOGGER_URL: /logger
      BASE_URL: https://api.ishswami.in
      API_PREFIX: /api/v1
      MAIN_DOMAIN: ishswami.in
      API_DOMAIN: api.ishswami.in
      FRONTEND_DOMAIN: ishswami.in
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-key-change-in-production}
      JWT_EXPIRATION: 24h
      LOG_LEVEL: info
      ENABLE_AUDIT_LOGS: "true"
      SECURITY_RATE_LIMIT: "true"
      SECURITY_RATE_LIMIT_MAX: 1000
      SECURITY_RATE_LIMIT_WINDOW_MS: 150
      REDIS_TTL: 3600
      REDIS_PREFIX: "healthcare:"
      RATE_LIMIT_TTL: 60
      RATE_LIMIT_MAX: 100
    expose:
      - "${API_PORT:-8088}"
    networks:
      app-network:
        ipv4_address: 172.18.0.5
        aliases:
          - api.ishswami.in
    dns: [] # Disable DNS resolution
    extra_hosts:
      - "api:172.18.0.5"
      - "postgres:172.18.0.2"
      - "redis:172.18.0.3"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--spider",
          "http://localhost:${API_PORT:-8088}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 1.5G
        reservations:
          cpus: "0.5"
          memory: 512M
    command: >
      sh -c "
        npx prisma generate --schema=/app/src/shared/database/prisma/schema.prisma &&
        npx prisma db push --schema=/app/src/shared/database/prisma/schema.prisma --accept-data-loss &&
        node dist/main.js
      "
    labels:
      - "com.docker.compose.service=api"
      - "app.component=backend"
      - "app.type=api"

  postgres:
    image: postgres:16
    container_name: latest-postgres
    hostname: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userdb
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 512MB
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      app-network:
        ipv4_address: 172.18.0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M
    restart: unless-stopped
    shm_size: 128mb
    stop_grace_period: 1m
    command: >
      postgres -c max_connections=200 
      -c shared_buffers=512MB 
      -c effective_cache_size=1536MB 
      -c maintenance_work_mem=128MB 
      -c checkpoint_completion_target=0.9 
      -c wal_buffers=16MB 
      -c default_statistics_target=100 
      -c random_page_cost=1.1 
      -c effective_io_concurrency=200 
      -c work_mem=8MB 
      -c min_wal_size=2GB 
      -c max_wal_size=8GB 
      -c max_worker_processes=8 
      -c max_parallel_workers_per_gather=4 
      -c max_parallel_workers=8 
      -c max_parallel_maintenance_workers=4
      -c idle_in_transaction_session_timeout=60000
      -c statement_timeout=60000
      -c lock_timeout=60000
      -c listen_addresses='*'
      -c log_connections=on
      -c log_disconnections=on
      -c tcp_keepalives_idle=60
      -c tcp_keepalives_interval=10
      -c tcp_keepalives_count=3
      -c client_min_messages=notice
    labels:
      - "com.docker.compose.service=postgres"
      - "app.component=database"
      - "app.type=postgres"
      - "app.healthcheck=enabled"
      - "app.persist=true"

  redis:
    image: redis:7
    container_name: latest-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      app-network:
        ipv4_address: 172.18.0.3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 384M
        reservations:
          cpus: "0.1"
          memory: 128M
    restart: unless-stopped
    sysctls:
      net.core.somaxconn: 1024
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    labels:
      - "com.docker.compose.service=redis"
      - "app.component=cache"
      - "app.type=redis"

volumes:
  postgres_data:
    name: healthcare_postgres_data
    labels:
      - "app.component=database"
      - "app.persist=true"
      - "app.type=postgres"
  redis_data:
    name: healthcare_redis_data
    labels:
      - "app.component=cache"
      - "app.persist=true"
      - "app.type=redis"

networks:
  app-network:
    name: app-network
    external: true
