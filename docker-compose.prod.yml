version: '3.8'
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - BUILDKIT_INLINE_CACHE=1
        - NPM_VERSION=11.3.0
      cache_from:
        - type=registry,ref=node:20-alpine
    container_name: latest-api
    hostname: api
    ports:
      - "${API_PORT:-8088}:${API_PORT:-8088}"  # API port
      - "5555:5555"  # Prisma Studio port
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      CORS_ORIGIN: "*"
      FRONTEND_URL: http://ishswami.in
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/userdb?schema=public&connection_limit=20&pool_timeout=30
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TRUST_PROXY: 1
      PRISMA_SCHEMA_PATH: /app/src/shared/database/prisma/schema.prisma
      HOST: 0.0.0.0
      PORT: ${API_PORT:-8088}
      BIND_ADDRESS: 0.0.0.0
      SOCKET_HOST: 0.0.0.0
      SOCKET_PORT: ${API_PORT:-8088}
      NPM_CONFIG_LOGLEVEL: error
      PGADMIN_URL: "not-used"
    expose:
      - "${API_PORT:-8088}"
      - "5555"
    networks:
      app-network:
        ipv4_address: 172.18.0.5
        aliases:
          - api.ishswami.in
    dns: []  # Disable DNS resolution
    extra_hosts:
      - "api:172.18.0.5"
      - "postgres:172.18.0.2"
      - "redis:172.18.0.3"
      - "redis-commander:172.18.0.4"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:${API_PORT:-8088}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: >
      sh -c "npx prisma generate &&
             npx prisma studio --port 5555 --hostname 0.0.0.0 &
             node dist/main.js"

  postgres:
    image: postgres:16
    container_name: latest-postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userdb
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 256MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      app-network:
        ipv4_address: 172.18.0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    shm_size: 128mb
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=768MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2

  redis:
    image: redis:7
    container_name: latest-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      app-network:
        ipv4_address: 172.18.0.3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    restart: unless-stopped
    sysctls:
      net.core.somaxconn: 1024
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: latest-redis-commander
    hostname: redis-commander
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
      READ_ONLY: "false"
      FOLDING_CHAR: ":"
      ROOT_PATTERN: "*"
    depends_on:
      - redis
    networks:
      app-network:
        ipv4_address: 172.18.0.4
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8081/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    restart: always

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    name: app-network
    external: true
