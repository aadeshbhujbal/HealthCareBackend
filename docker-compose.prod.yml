version: '3.8'
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - BUILDKIT_INLINE_CACHE=1
        - NPM_VERSION=11.3.0
      cache_from:
        - type=registry,ref=node:20-alpine
    container_name: latest-api
    hostname: api
    ports:
      - "80:${API_PORT:-8088}"  # Expose directly on port 80
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      CORS_ORIGIN: "*"
      FRONTEND_URL: http://ishswami.in
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@172.18.0.2:${POSTGRES_PORT:-5432}/userdb?schema=public
      REDIS_HOST: 172.18.0.3
      REDIS_PORT: ${REDIS_PORT:-6379}
      TRUST_PROXY: 1
      PRISMA_SCHEMA_PATH: /app/src/shared/database/prisma/schema.prisma
      HOST: 0.0.0.0
      PORT: ${API_PORT:-8088}
      BIND_ADDRESS: 0.0.0.0
      SOCKET_HOST: 0.0.0.0
      SOCKET_PORT: ${API_PORT:-8088}
      NPM_CONFIG_LOGLEVEL: error
    expose:
      - "${API_PORT:-8088}"
      - "5555"
    networks:
      app-network:
        ipv4_address: 172.18.0.5
        aliases:
          - api.ishswami.in
    dns: []  # Disable DNS resolution
    extra_hosts:
      - "api:172.18.0.5"
      - "postgres:172.18.0.2"
      - "redis:172.18.0.3"
      - "redis-commander:172.18.0.4"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:${API_PORT:-8088}/${HEALTH_CHECK_ENDPOINT:-health}"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  postgres:
    image: postgres:latest
    container_name: latest-postgres
    hostname: postgres
    ports:
      - "${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: userdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/shared/database/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      app-network:
        ipv4_address: 172.18.0.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    shm_size: 128mb

  redis:
    image: redis:latest
    container_name: latest-redis
    hostname: redis
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru 
      --save 900 1 
      --save 300 10 
      --save 60 10000
    ports:
      - "${REDIS_PORT:-6379}:${REDIS_PORT:-6379}"
    volumes:
      - redis_data:/data
    networks:
      app-network:
        ipv4_address: 172.18.0.3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    restart: unless-stopped
    sysctls:
      net.core.somaxconn: 1024
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: latest-redis-commander
    hostname: redis-commander
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=172.18.0.3:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
      - TRUST_PROXY=true
      - HTTPS_ENABLED=false
    depends_on:
      - redis
    networks:
      app-network:
        ipv4_address: 172.18.0.4
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8081/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    name: app-network
    external: true
