name: Deploy Healthcare Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  actions: read
  deployments: write

env:
  DOCKER_COMPOSE_VERSION: v2.20.2
  SERVER_HOST: api.ishswami.in
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DEPLOY_PATH: /var/www/healthcare/backend
  SERVER_IP: 82.208.20.16
  DOMAIN: api.ishswami.in
  FRONTEND_DOMAIN: ishswami.in
  SSL_EMAIL: aadeshbhujbal99@gmail.com
  NODE_ENV: production
  API_URL: https://api.ishswami.in
  API_CONTAINER: latest-api
  POSTGRES_CONTAINER: latest-postgres
  REDIS_CONTAINER: latest-redis
  REDIS_COMMANDER_CONTAINER: latest-redis-commander
  NETWORK_NAME: app-network

jobs:
  pre-deployment-check:
    runs-on: ubuntu-latest
    steps:
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection to ${{ env.SERVER_IP }}..."
          # Create SSH key file
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add server to known hosts and test connection with timeout and retries
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
          # Try multiple times with increasing backoff
          MAX_RETRIES=5
          RETRY_COUNT=0
          CONNECTED=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$CONNECTED" != "true" ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            SLEEP_TIME=$((RETRY_COUNT * 5))
            
            echo "Connection attempt $RETRY_COUNT/$MAX_RETRIES..."
            if timeout 30s ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=10 -o TCPKeepAlive=yes ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "echo SSH connection successful"; then
            echo "✅ SSH connection successful"
              CONNECTED=true
              break
          else
            echo "❌ SSH connection failed"
              echo "Waiting $SLEEP_TIME seconds before retry..."
              sleep $SLEEP_TIME
            fi
          done

          if [ "$CONNECTED" != "true" ]; then
            echo "All connection attempts failed. Trying one last time with different settings..."
            if timeout 60s ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=60 -o ServerAliveInterval=15 -o TCPKeepAlive=yes -o IPQoS=throughput ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "echo SSH connection successful"; then
              echo "✅ Last attempt SSH connection successful"
              CONNECTED=true
            else
              echo "❌ All SSH connection attempts failed"
            echo "Attempting to ping server..."
            ping -c 4 ${{ env.SERVER_IP }}
            exit 1
            fi
          fi

      - name: Check domain DNS
        run: |
          echo "Checking DNS for ${{ env.DOMAIN }}..."
          if ! nslookup ${{ env.DOMAIN }} > /dev/null 2>&1; then
            echo "Warning: Domain ${{ env.DOMAIN }} DNS resolution failed"
            echo "Please ensure domain is properly configured"
            # Don't exit with error as this is just a warning
            echo "Continuing deployment despite DNS warning..."
          else
            echo "Domain ${{ env.DOMAIN }} resolves correctly"
          fi

      - name: Check server connectivity
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          debug: true
          timeout: 120s
          command_timeout: "30m"
          proxy_timeout: 120s
          script: |
            echo "Testing connection to server..."
            echo "Current date and time: $(date)"
            echo "Server IP: $(hostname -I || echo 'hostname command not available')"
            echo "Checking system resources..."
            df -h
            free -m

            # Don't exit if Docker system df fails (first deployment)
            echo "Checking Docker status..."
            docker system df || echo "Docker may not be initialized yet, continuing..."

            echo "Checking required ports..."
            # Use netstat if available, otherwise skip
            if command -v netstat &> /dev/null; then
              for port in 8088 5432 6379 8082; do
                if netstat -tuln | grep -q ":$port "; then
                  echo "Warning: Port $port is already in use"
                  netstat -tuln | grep ":$port "
                else
                  echo "Port $port is available"
                fi
              done
            else
              echo "netstat not available, skipping port check"
            fi

            echo "Checking disk space..."
            DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
            if [ "$DISK_USAGE" -gt 85 ]; then
              echo "Warning: Disk usage is above 85%"
              df -h /
            else
              echo "Disk space is sufficient"
            fi

  create-deployment:
    needs: [pre-deployment-check]
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ github.run_id }}
    steps:
      - name: Create deployment marker
        run: echo "Creating deployment with ID ${{ github.run_id }}"

  deploy:
    needs: create-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create backup and cleanup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          debug: true
          timeout: 120s
          command_timeout: "30m"
          proxy_timeout: 120s
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}

            # Create backup directory with timestamp
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p backups/$timestamp

            # Only backup and stop API container since we're only updating the API
            if [ -d "current" ] && [ -f "current/docker-compose.prod.yml" ]; then
              echo "Stopping current API deployment..."
              cd current
              
              # Check if API container exists and stop only it
              if docker ps -a --format '{{.Names}}' | grep -q "^${{ env.API_CONTAINER }}$"; then
                echo "Stopping API container..."
                docker stop ${{ env.API_CONTAINER }} || true
                docker rm ${{ env.API_CONTAINER }} || true
              fi
              
              # Keep database containers running
              echo "Keeping database containers running for persistence..."
              cd ..

              echo "Creating backup of API code..."
              cp -r current/* backups/$timestamp/ 2>/dev/null || true
              echo $timestamp > backups/latest_backup
            else
              echo "No current deployment found, proceeding with fresh deployment..."
            fi

            # Clean up Docker resources related to the API only
            echo "Cleaning up API Docker resources..."
            docker system prune -f --filter "label=com.docker.compose.service=api"

            # Remove any existing API containers with conflicting names
            if docker ps -a --format '{{.Names}}' | grep -q "^${{ env.API_CONTAINER }}$"; then
              echo "Removing existing API container: ${{ env.API_CONTAINER }}"
              docker rm -f ${{ env.API_CONTAINER }} || true
            fi

            # Create necessary Docker network if it doesn't exist
            echo "Creating Docker network if it doesn't exist..."
            if ! docker network inspect app-network > /dev/null 2>&1; then
              docker network create app-network --subnet=172.18.0.0/16
            fi

            # Create necessary directories if they don't exist
            mkdir -p current
            mkdir -p releases
            mkdir -p backups

      - name: Prepare deployment files
        run: |
          echo "Preparing files for deployment..."
          echo "Current directory: $PWD"
          echo "GitHub workspace: $GITHUB_WORKSPACE"

          # Create a temporary deployment directory
          rm -rf deploy_temp
          mkdir -p deploy_temp

          # Copy required directories and files
          echo "Copying deployment files..."
          cp -r src nginx deploy_temp/
          cp docker-compose.prod.yml .env.production Dockerfile package*.json tsconfig*.json deploy_temp/

          # Also copy scripts directory to ensure rollback script is available
          mkdir -p deploy_temp/scripts
          if [ -d "scripts" ]; then
            cp -r scripts/* deploy_temp/scripts/
          else
            # Create scripts directory if it doesn't exist
            mkdir -p scripts
          fi

          # Ensure rollback script is executable
          if [ -f "deploy_temp/scripts/rollback.sh" ]; then
            chmod +x deploy_temp/scripts/rollback.sh
          fi

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: "deploy_temp/*"
          target: "${{ env.DEPLOY_PATH }}/releases/${{ github.sha }}"
          strip_components: 1
          overwrite: true
          rm: false

      - name: Deploy to server
        id: deploy_to_server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          command_timeout: "30m"
          timeout: 120s
          proxy_timeout: 120s
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}/releases/${{ github.sha }}

            # Make scripts executable
            if [ -d "scripts" ]; then
              chmod +x scripts/*.sh
            fi

            # Configure host to resolve api.ishswami.in to localhost
            echo "Configuring hosts file for api.ishswami.in..."
            if ! grep -q "api.ishswami.in" /etc/hosts; then
              echo "127.0.0.1 api.ishswami.in" | sudo tee -a /etc/hosts
            fi

            # Make sure api.ishswami.in is also registered on the server's public IP
            echo "Ensuring domain is properly configured on server..."
            SERVER_IP=$(curl -s ifconfig.me)
            if ! grep -q "$SERVER_IP api.ishswami.in" /etc/hosts; then
              echo "$SERVER_IP api.ishswami.in" | sudo tee -a /etc/hosts
            fi

            # Handle Docker network
            echo "Setting up Docker network..."
            if ! docker network inspect app-network > /dev/null 2>&1; then
              echo "Creating Docker network app-network..."
              docker network create app-network --subnet=172.18.0.0/16
            fi

            # SSL certificate handling remains the same
            # ... existing SSL configuration code ...

            # Check and manage database containers
            echo "Checking database containers..."

                        # Improved PostgreSQL container health check - use pattern matching instead of exact names
            # Find postgres container regardless of exact name
            POSTGRES_CONTAINER_ID=$(docker ps | grep postgres | grep -v "grep" | awk '{print $1}' | head -n 1)
            if [ -n "$POSTGRES_CONTAINER_ID" ]; then
              echo "PostgreSQL container is running with ID: $POSTGRES_CONTAINER_ID"
              # More reliable health check - containers often report "Up" or "(healthy)" status
              if docker inspect --format="{{.State.Status}}" $POSTGRES_CONTAINER_ID | grep -q "running"; then
                echo "PostgreSQL container is already running and appears healthy. Keeping it as is."
                POSTGRES_RUNNING=true
                # Save the container name for later usage
                REAL_POSTGRES_CONTAINER=$(docker inspect --format="{{.Name}}" $POSTGRES_CONTAINER_ID | sed 's/^\///')
                echo "Detected actual PostgreSQL container name: $REAL_POSTGRES_CONTAINER"
              else
                echo "PostgreSQL container exists but may not be running. Will attempt to keep it anyway."
                # Changed to keep existing DB container even if health check isn't perfect
                POSTGRES_RUNNING=true
                REAL_POSTGRES_CONTAINER=$(docker inspect --format="{{.Name}}" $POSTGRES_CONTAINER_ID | sed 's/^\///')
              fi
            else
              echo "No running PostgreSQL container found. Will create it."
              POSTGRES_RUNNING=false
              REAL_POSTGRES_CONTAINER=""
            fi

            # Improved Redis container health check - use pattern matching instead of exact names
            # Find redis container regardless of exact name, excluding redis-commander
            REDIS_CONTAINER_ID=$(docker ps | grep redis | grep -v "commander\|grep" | awk '{print $1}' | head -n 1)
            if [ -n "$REDIS_CONTAINER_ID" ]; then
              echo "Redis container is running with ID: $REDIS_CONTAINER_ID"
              # More reliable health check using docker inspect
              if docker inspect --format="{{.State.Status}}" $REDIS_CONTAINER_ID | grep -q "running"; then
                echo "Redis container is already running and appears healthy. Keeping it as is."
                REDIS_RUNNING=true
                # Save the container name for later usage
                REAL_REDIS_CONTAINER=$(docker inspect --format="{{.Name}}" $REDIS_CONTAINER_ID | sed 's/^\///')
                echo "Detected actual Redis container name: $REAL_REDIS_CONTAINER"
              else
                echo "Redis container exists but may not be running. Will attempt to keep it anyway."
                # Changed to keep existing Redis container even if health check isn't perfect
                REDIS_RUNNING=true
                REAL_REDIS_CONTAINER=$(docker inspect --format="{{.Name}}" $REDIS_CONTAINER_ID | sed 's/^\///')
              fi
            else
              echo "No running Redis container found. Will create it."
              REDIS_RUNNING=false
              REAL_REDIS_CONTAINER=""
            fi

            # Additional verification of database containers with dynamic names
            if [ "$POSTGRES_RUNNING" = true ] && [ -n "$REAL_POSTGRES_CONTAINER" ]; then
              echo "Verifying PostgreSQL container is responsive..."
              # Simple connection test using the detected container name
              if docker exec $REAL_POSTGRES_CONTAINER pg_isready -q; then
                echo "PostgreSQL container is responsive."
              else
                echo "Warning: PostgreSQL container exists but isn't responding to connection tests."
                # Still keeping it to avoid data loss - might self-recover
              fi
            fi

            if [ "$REDIS_RUNNING" = true ] && [ -n "$REAL_REDIS_CONTAINER" ]; then
              echo "Verifying Redis container is responsive..."
              # Simple ping test using the detected container name
              if docker exec $REAL_REDIS_CONTAINER redis-cli ping | grep -q "PONG"; then
                echo "Redis container is responsive."
              else
                echo "Warning: Redis container exists but isn't responding to ping tests."
                # Still keeping it to avoid data loss - might self-recover
              fi
            fi

            # Install any required build dependencies for bcrypt
            echo "Installing build dependencies for native modules..."
            if ! command -v python3 &> /dev/null || ! command -v g++ &> /dev/null || ! command -v make &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y python3 make g++ build-essential
            fi

            # Selective container start based on status
            DEPLOY_SUCCESS=false

            if [ "$POSTGRES_RUNNING" = true ] && [ "$REDIS_RUNNING" = true ]; then
              echo "Database containers are healthy. Only rebuilding and restarting API container..."
              # Build and start only the API container with --no-deps to avoid touching database containers
              if docker compose -f docker-compose.prod.yml up -d --build --no-deps api; then
                echo "API container started successfully"
              else
                echo "Failed to start API container"
                exit 1
              fi
            else
              echo "Some database containers need to be created or recreated..."
              
              # Handle each container separately for better control
              # First, make sure the network exists
              docker network inspect app-network >/dev/null 2>&1 || docker network create app-network
              
              # Start/create PostgreSQL if needed
              if [ "$POSTGRES_RUNNING" = false ]; then
                echo "Creating PostgreSQL container..."
                if ! docker compose -f docker-compose.prod.yml up -d --no-recreate postgres; then
                  echo "Warning: Issue starting PostgreSQL container, but continuing..."
                fi
              fi
              
              # Start/create Redis if needed
              if [ "$REDIS_RUNNING" = false ]; then
                echo "Creating Redis container..."
                if ! docker compose -f docker-compose.prod.yml up -d --no-recreate redis; then
                  echo "Warning: Issue starting Redis container, but continuing..."
                fi
              fi
              
              # Now build and start the API container
              echo "Building and starting API container..."
              if docker compose -f docker-compose.prod.yml up -d --build --no-deps api; then
                echo "API container started successfully"
              else
                echo "Failed to start API container"
                exit 1
              fi
            fi

            # Verify all containers are running
            echo "Verifying all required containers are running..."
            docker ps

            # Manually generate Prisma client in the API container to ensure it's available
            echo "Generating Prisma client in API container..."
            docker exec latest-api sh -c "npx prisma generate --schema=/app/src/shared/database/prisma/schema.prisma" || true

            # Test database connection 
            echo "Testing database connection..."
            if docker exec latest-api sh -c "node -e \"const { PrismaClient } = require('@prisma/client'); const prisma = new PrismaClient(); prisma.\$connect().then(() => { console.log('Prisma connection successful'); process.exit(0); }).catch(e => { console.error('Prisma connection failed:', e); process.exit(1); })\""; then
              echo "Database connection successful"
            else
              echo "Database connection failed, continuing deployment anyway..."
            fi

            # Wait for API container to be healthy
            echo "Waiting for API container to be healthy..."
            for i in {1..30}; do
              if docker ps --filter "name=${{ env.API_CONTAINER }}" --format "{{.Status}}" | grep -q "healthy"; then
                echo "API container is healthy"
                DEPLOY_SUCCESS=true
                break
              fi
              if [ $i -eq 30 ]; then
                echo "Error: API container failed to become healthy"
                docker logs ${{ env.API_CONTAINER }}
                exit 1
              fi
              echo "Attempt $i/30: Waiting for API container to be healthy..."
              sleep 10
            done

            # Configure firewall to allow traffic on ports
            echo "Configuring firewall..."
            sudo ufw allow 80/tcp
            sudo ufw allow 443/tcp
            sudo ufw allow 8088/tcp
            sudo ufw allow 8082/tcp

            # Final health check with curl
            echo "Performing final health check..."
            if curl -s http://localhost:8088/health | grep -q '"status"\s*:\s*"healthy"\|"status":"up"\|"status": "up"'; then
              echo "API health check successful"
              DEPLOY_SUCCESS=true
            else
              echo "Warning: API health check did not return healthy status"
              # Continue anyway in case the health check format is different
            fi

            # Update current deployment symlink
            cd ${{ env.DEPLOY_PATH }}
            ln -sfn releases/${{ github.sha }} current

            # Mark deployment as successful if health checks passed
            if [ "$DEPLOY_SUCCESS" = true ]; then
              echo "Marking deployment as successful..."
              
              # Create the successful deployments file if it doesn't exist
              SUCCESSFUL_DEPLOYMENTS_FILE="${{ env.DEPLOY_PATH }}/successful_deployments.txt"
              touch "$SUCCESSFUL_DEPLOYMENTS_FILE"
              
              # Add this deployment to the successful deployments file
              echo "${{ github.sha }}" >> "$SUCCESSFUL_DEPLOYMENTS_FILE"
              echo "Deployment marked as successful"
            else
              echo "Deployment not marked as successful due to health check failures"
            fi

            echo "Deployment completed successfully!"
            echo "API should be accessible at:"
            echo "HTTPS (Domain): https://api.ishswami.in"
            echo "HTTP (Domain): http://api.ishswami.in"
            echo "HTTPS (IP): https://${{ env.SERVER_IP }}"
            echo "HTTP (IP): http://${{ env.SERVER_IP }}"

            # Test API health
            echo "Testing API health..."
            curl -v http://localhost:8088/health

            echo "All services are deployed!"

            # Setting environment variables directly to API container
            docker exec -e REDIS_COMMANDER_URL=/redis-ui \
                      -e SOCKET_URL=/socket.io \
                      -e REDIS_UI_URL=/redis-ui \
                      -e LOGGER_URL=/logger \
                      latest-api sh -c 'echo "Environment variables updated via Docker exec"'

            # Restart Nginx to apply configuration changes
            echo "Restarting Nginx service..."
            sudo systemctl restart nginx

            # Display container status
            echo "Docker container status:"
            docker ps

            # Check API container logs for any issues
            echo "Latest API container logs:"
            docker logs latest-api --tail 20

  post-deployment-verification:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Verify domain
        run: |
          echo "Verifying domain resolution for api.ishswami.in..."

          # Check DNS resolution
          if ! nslookup api.ishswami.in > /dev/null 2>&1; then
            echo "Warning: Domain api.ishswami.in is not resolving"
            echo "Check your DNS configuration"
          fi

      - name: Verify application health
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          timeout: 120s
          proxy_timeout: 120s
          script: |
            set -e

            echo "Verifying application health..."

            # Check if API is responding at all
            if ! curl -s http://localhost:8088/health > /tmp/health_response; then
              echo "Error: API health endpoint unreachable"
              docker logs latest-api --tail 50
              exit 1
            fi

            # Display the API health response for debugging
            echo "API Health Response:"
            cat /tmp/health_response

            # Check status - accepting various success indicators
            if grep -q "ok\|status.*up\|\"status\":\"ok\"\|\"status\": \"ok\"" /tmp/health_response; then
              echo "API health check passed"
              
              # Mark deployment as successful after verification
              SUCCESSFUL_DEPLOYMENTS_FILE="/var/www/healthcare/backend/successful_deployments.txt"
              if ! grep -q "${{ github.sha }}" "$SUCCESSFUL_DEPLOYMENTS_FILE"; then
                echo "${{ github.sha }}" >> "$SUCCESSFUL_DEPLOYMENTS_FILE"
                echo "Deployment confirmed successful after verification"
              fi
              
              # Schedule the server maintenance script to run in the background
              # This will clean up old releases and perform other maintenance tasks
              nohup bash /var/www/healthcare/backend/current/scripts/server-maintenance.sh > /dev/null 2>&1 &
              echo "Scheduled maintenance script to run in the background"
              
              # Also schedule a database backup
              nohup bash /var/www/healthcare/backend/current/scripts/backup-database.sh > /dev/null 2>&1 &
              echo "Scheduled database backup to run in the background"
            else
              echo "Error: API health check failed - unexpected response"
              docker logs latest-api --tail 50
              exit 1
            fi

            echo "All services are healthy!"

      - name: Update deployment status success
        if: success()
        run: |
          echo "Deployment successful"

      - name: Update deployment status failure
        if: failure()
        run: |
          echo "Deployment failed"

  rollback:
    if: failure() && (needs.deploy.result == 'failure' || needs.post-deployment-verification.result == 'failure')
    needs: [deploy, post-deployment-verification, create-deployment]
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          timeout: 120s
          proxy_timeout: 120s
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}

            echo "Deployment failed. Initiating automatic rollback..."

            # Check if our rollback script exists
            if [ -f "current/scripts/rollback.sh" ]; then
              echo "Using rollback script to revert to last successful deployment..."
              cd current/scripts
              chmod +x rollback.sh
              ./rollback.sh auto
              
              if [ $? -eq 0 ]; then
                echo "Rollback completed successfully using rollback script"
                exit 0
              else
                echo "Rollback script failed, falling back to manual rollback procedure"
              fi
            else
              echo "Rollback script not found, using manual rollback procedure"
            fi

            # Manual rollback procedure as fallback
            cd ${{ env.DEPLOY_PATH }}

            # Ensure backup directory exists
            mkdir -p backups

            # Check if current deployment exists
            if [ -d "current" ] && [ -f "current/docker-compose.prod.yml" ]; then
              echo "Current deployment found, attempting to restore from previous version if available"
              
              # Check if successful deployments file exists
              SUCCESSFUL_DEPLOYMENTS_FILE="${{ env.DEPLOY_PATH }}/successful_deployments.txt"
              if [ -f "$SUCCESSFUL_DEPLOYMENTS_FILE" ]; then
                echo "Found successful deployments record"
                
                # Get the last successful deployment that's not the current one
                CURRENT_DEPLOY=$(basename $(readlink -f current))
                LAST_SUCCESSFUL=$(grep -v "$CURRENT_DEPLOY" "$SUCCESSFUL_DEPLOYMENTS_FILE" | tail -n 1)
                
                if [ -n "$LAST_SUCCESSFUL" ] && [ -d "releases/$LAST_SUCCESSFUL" ]; then
                  echo "Rolling back to last successful deployment: $LAST_SUCCESSFUL"
                  
                  # Stop current API container
                  echo "Stopping current API container..."
                  docker stop latest-api || true
                  docker rm latest-api || true
                  
                  # Clean up Docker resources specifically for API only
                  echo "Cleaning up API Docker resources..."
                  docker system prune -f --filter "label=com.docker.compose.service=api"
                  
                  # Update symlink to the last successful deployment
                  ln -sfn "releases/$LAST_SUCCESSFUL" current
                  
                  # Start the API from the last successful deployment
                  cd current
                  # Using --no-deps ensures database containers are not touched
                  docker-compose -f docker-compose.prod.yml up -d --build --no-deps api
                  
                  # Verify database containers are still running
                  echo "Verifying database containers are still running..."
                  
                  # Check if any PostgreSQL container is running (safer than exact name matching)
                  if ! docker ps | grep -q "postgres"; then
                    echo "Warning: No PostgreSQL container appears to be running after rollback. Starting it..."
                    docker-compose -f docker-compose.prod.yml up -d --no-recreate postgres
                  else
                    echo "PostgreSQL container appears to be running."
                  fi
                  
                  # Check if any Redis container is running (safer than exact name matching)
                  if ! docker ps | grep -q "redis" | grep -v "commander"; then
                    echo "Warning: No Redis container appears to be running after rollback. Starting it..."
                    docker-compose -f docker-compose.prod.yml up -d --no-recreate redis
                  else
                    echo "Redis container appears to be running."
                  fi
                  
                  # Wait for API to be healthy
                  echo "Waiting for API to be healthy..."
                  for i in {1..30}; do
                    sleep 10
                    if curl -s http://localhost:8088/health | grep -q "ok\|status.*up\|\"status\":\"ok\"\|\"status\": \"ok\""; then
                      echo "API is healthy after rollback"
                      exit 0
                    fi
                    echo "Attempt $i/30: Waiting for API to be healthy..."
                  done
                  
                  echo "API failed to become healthy after rollback"
                  exit 1
                fi
              fi
              
              # If we get here, either no successful deployments file exists or no valid last successful deployment was found
              # Fall back to using the backup
              if [ -f backups/latest_backup ]; then
                timestamp=$(cat backups/latest_backup)
                echo "Rolling back to backup from $timestamp"
                
                # Stop current API container
                echo "Stopping current API container..."
                docker stop ${{ env.API_CONTAINER }} || true
                docker rm ${{ env.API_CONTAINER }} || true
                
                # Clean up Docker resources specifically for API
                echo "Cleaning up API Docker resources..."
                docker system prune -f --filter "label=com.docker.compose.service=api"
                
                # Restore from backup
                rm -rf current
                cp -r backups/$timestamp current/
                
                # Start API from backup
                cd current
                docker-compose -f docker-compose.prod.yml up -d --build api
                
                # Wait for API to be healthy
                echo "Waiting for API to be healthy..."
                attempt=1
                max_attempts=30
                while [ $attempt -le $max_attempts ]; do
                  curl -s http://localhost:8088/health > /tmp/health_response
                  if grep -q "ok\|status.*up\|\"status\":\"ok\"\|\"status\": \"ok\"" /tmp/health_response; then
                    echo "API service is healthy after rollback"
                    echo "Response: $(cat /tmp/health_response)"
                    break
                  fi
                  echo "Attempt $attempt/$max_attempts: Waiting for API service..."
                  echo "Current response: $(cat /tmp/health_response)"
                  sleep 10
                  attempt=$((attempt + 1))
                done
                
                if [ $attempt -gt $max_attempts ]; then
                  echo "Error: API service failed to become healthy after rollback"
                  docker logs latest-api
                  exit 1
                fi
                
                echo "Rollback completed successfully"
              else
                echo "No backup found for rollback, but current deployment exists"
                echo "No action taken - keeping current deployment"
                exit 0
              fi
            else
              echo "No current deployment found, nothing to roll back"
              exit 0
            fi

      - name: Update deployment status success
        if: success()
        run: |
          echo "Rollback successful"

      - name: Update deployment status failure
        if: failure()
        run: |
          echo "Rollback failed"
