name: Deploy Healthcare Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  actions: read
  deployments: write

env:
  DOCKER_COMPOSE_VERSION: v2.20.2
  SERVER_HOST: api.ishswami.in
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DEPLOY_PATH: /var/www/healthcare/backend
  SERVER_IP: 82.208.20.16
  DOMAIN: api.ishswami.in
  FRONTEND_DOMAIN: ishswami.in
  SSL_EMAIL: aadeshbhujbal99@gmail.com
  NODE_ENV: production
  API_CONTAINER: latest-api
  POSTGRES_CONTAINER: latest-postgres
  REDIS_CONTAINER: latest-redis
  REDIS_COMMANDER_CONTAINER: latest-redis-commander
  NETWORK_NAME: app-network

jobs:
  pre-deployment-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check domain DNS and SSL
        run: |
          echo "Checking DNS for ${{ env.DOMAIN }}..."
          if ! nslookup ${{ env.DOMAIN }} > /dev/null 2>&1; then
            echo "Warning: Domain ${{ env.DOMAIN }} DNS resolution failed"
            echo "Please ensure domain is properly configured"
            exit 1
          fi

          echo "Checking SSL certificate expiry..."
          expiry=$(echo | openssl s_client -servername ${{ env.DOMAIN }} -connect ${{ env.DOMAIN }}:443 2>/dev/null | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
          if [ ! -z "$expiry" ]; then
            expiry_sec=$(date -d "$expiry" +%s)
            now_sec=$(date +%s)
            days_left=$(( ($expiry_sec - $now_sec) / 86400 ))
            if [ $days_left -lt 30 ]; then
              echo "Warning: SSL certificate will expire in $days_left days"
            fi
          fi

      - name: Check server connectivity and resources
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            echo "Checking system resources..."
            df -h
            free -m
            docker system df

            echo "Checking Docker status..."
            if ! docker info > /dev/null 2>&1; then
              echo "Docker is not running!"
              exit 1
            fi

            echo "Checking required ports..."
            for port in 8088 5432 6379 8082; do
              if netstat -tuln | grep -q ":$port "; then
                echo "Warning: Port $port is already in use"
                netstat -tuln | grep ":$port "
              fi
            done

            echo "Checking disk space..."
            DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
            if [ "$DISK_USAGE" -gt 85 ]; then
              echo "Warning: Disk usage is above 85%"
              df -h /
            fi

            echo "Checking SSL certificate paths..."
            for dir in "/etc/nginx/ssl" "/app/ssl"; do
              if [ ! -d "$dir" ]; then
                echo "Creating $dir directory..."
                sudo mkdir -p $dir
                sudo chmod 755 $dir
              fi
            done

  create-deployment:
    needs: [pre-deployment-check]
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
    steps:
      - name: Create GitHub deployment
        id: create_deployment
        uses: actions/github-script@v6
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.id;

  deploy:
    needs: create-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fix file permissions
        run: |
          # Make scripts executable and verify their existence
          echo "Checking and setting permissions for deployment scripts..."
          for script in nginx/deploy-nginx.sh scripts/set-permissions.sh; do
            if [ -f "$script" ]; then
              echo "Making $script executable..."
              chmod +x "$script"
              git add "$script"
            else
              echo "Error: $script not found!"
              ls -la $(dirname "$script")
              exit 1
            fi
          done

          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -m "chore: Make deployment scripts executable" || true

      - name: Create backup and cleanup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}

            # Create backup directory with timestamp
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p backups/$timestamp

            # Ensure scripts directory exists
            mkdir -p current/scripts

            # Stop and backup current deployment if it exists
            if [ -d "current" ] && [ -f "current/docker-compose.prod.yml" ]; then
              echo "Stopping current deployment..."
              cd current
              docker compose -f docker-compose.prod.yml down --remove-orphans || true
              cd ..

              echo "Creating backup..."
              cp -r current/* backups/$timestamp/ 2>/dev/null || true
              echo $timestamp > backups/latest_backup
              
              # Backup SSL certificates
              if [ -d "current/nginx/ssl" ]; then
                mkdir -p backups/$timestamp/ssl
                cp -r current/nginx/ssl/* backups/$timestamp/ssl/ 2>/dev/null || true
              fi

              # Clean up old backups (keep last 5)
              ls -1t backups | tail -n +6 | xargs -r rm -rf
            else
              echo "No current deployment found, proceeding with fresh deployment..."
            fi

            # Clean up Docker resources
            echo "Cleaning up Docker resources..."
            docker system prune -f
            docker volume prune -f
            docker network prune -f

            # Remove any existing containers with conflicting names
            for container in latest-redis latest-postgres latest-api latest-redis-commander; do
              if docker ps -a --format '{{.Names}}' | grep -q "^$container$"; then
                echo "Removing existing container: $container"
                docker rm -f $container || true
              fi
            done

            # Additional cleanup for any containers with the same name pattern
            echo "Cleaning up any remaining containers with similar names..."
            docker ps -a --format '{{.Names}}' | grep -E '^(latest|.*-redis-commander)$' | while read container; do
              echo "Removing container: $container"
              docker rm -f $container || true
            done

            # Create necessary directories if they don't exist
            mkdir -p current
            mkdir -p releases
            mkdir -p backups

      - name: Prepare SSL files
        run: |
          # Create SSL directories
          mkdir -p ssl_temp
          # Copy and rename certificates
          cp nginx/ssl/api.ishswami.in.crt ssl_temp/
          cp nginx/ssl/api.ishswami.in.key ssl_temp/

          # Verify SSL certificate
          echo "Verifying SSL certificate..."
          if ! openssl x509 -in ssl_temp/api.ishswami.in.crt -noout -text > /dev/null; then
            echo "Error: Invalid SSL certificate"
            exit 1
          fi

          # Check certificate matches private key
          echo "Checking certificate and key match..."
          cert_mod=$(openssl x509 -noout -modulus -in ssl_temp/api.ishswami.in.crt | openssl md5)
          key_mod=$(openssl rsa -noout -modulus -in ssl_temp/api.ishswami.in.key | openssl md5)
          if [ "$cert_mod" != "$key_mod" ]; then
            echo "Error: Certificate and private key do not match"
            exit 1
          fi

      - name: Copy SSL certificates
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: "ssl_temp/*"
          target: "/tmp/ssl-temp"
          strip_components: 1

      - name: Prepare deployment files
        run: |
          echo "Preparing files for deployment..."
          # Ensure we're in the correct directory
          cd ${{ github.workspace }}

          # Create a temporary deployment directory
          mkdir -p deploy_temp
          cp -r HealthCareBackend/* deploy_temp/
          cp docker-compose.prod.yml deploy_temp/

          # Verify files exist
          if [ ! -f "deploy_temp/scripts/set-permissions.sh" ]; then
            echo "Error: set-permissions.sh not found in prepared files"
            ls -la deploy_temp/scripts/
            exit 1
          fi

          # Make scripts executable before copying
          chmod +x deploy_temp/scripts/set-permissions.sh
          chmod +x deploy_temp/nginx/deploy-nginx.sh

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: "deploy_temp/*"
          target: "${{ env.DEPLOY_PATH }}/releases/${{ github.sha }}"
          strip_components: 1
          overwrite: true
          rm: false

      - name: Verify copied files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}/releases/${{ github.sha }}

            echo "Verifying deployment files..."
            echo "Current directory structure:"
            find . -type f -name "*.sh" -exec ls -la {} \;

            if [ ! -f "scripts/set-permissions.sh" ]; then
              echo "Error: set-permissions.sh not found"
              echo "Directory contents:"
              ls -la
              echo "Scripts directory contents:"
              ls -la scripts/ || echo "scripts directory not found"
              exit 1
            fi

            if [ ! -f "nginx/deploy-nginx.sh" ]; then
              echo "Error: deploy-nginx.sh not found"
              exit 1
            fi

            # Make scripts executable again (in case permissions were lost during transfer)
            chmod +x scripts/set-permissions.sh
            chmod +x nginx/deploy-nginx.sh

            echo "All required files found and verified"

      - name: Set file permissions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}/releases/${{ github.sha }}

            # Make scripts executable
            chmod +x HealthCareBackend/scripts/set-permissions.sh
            chmod +x HealthCareBackend/nginx/deploy-nginx.sh

            # Set proper permissions for all files
            ./HealthCareBackend/scripts/set-permissions.sh

            # Set proper permissions for Nginx configuration files
            chmod 644 HealthCareBackend/nginx/conf.d/*.conf
            chmod 644 HealthCareBackend/nginx/nginx.conf

            # Set proper permissions for SSL files
            chmod 600 HealthCareBackend/nginx/ssl/*.key
            chmod 644 HealthCareBackend/nginx/ssl/*.crt
            chmod 644 HealthCareBackend/nginx/ssl/*.pem
            chmod 644 HealthCareBackend/nginx/ssl/*.chain.crt
            chmod 644 HealthCareBackend/nginx/ssl/README.md

            # Set directory permissions
            chmod 755 HealthCareBackend/nginx/conf.d
            chmod 700 HealthCareBackend/nginx/ssl
            chmod 755 HealthCareBackend/nginx
            chmod 755 HealthCareBackend/scripts

            echo "All permissions set successfully"

      - name: Copy and verify deployment scripts
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}

            echo "Verifying deployment scripts..."
            for script in "nginx/deploy-nginx.sh" "scripts/set-permissions.sh"; do
              script_path="current/$script"
              script_dir=$(dirname "$script_path")
              
              # Ensure directory exists
              mkdir -p "$script_dir"
              
              # Check if script exists and is executable
              if [ -f "$script_path" ]; then
                echo "Verifying permissions for $script_path"
                chmod +x "$script_path"
                ls -la "$script_path"
              else
                echo "Warning: $script_path not found"
              fi
            done

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          command_timeout: "30m"
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}/releases/${{ github.sha }}

            echo "Current directory: $(pwd)"
            echo "Listing directory structure:"
            find . -type f -name "*.sh" -exec ls -la {} \;

            # Verify and set script permissions
            for script_path in \
              "scripts/set-permissions.sh" \
              "nginx/deploy-nginx.sh"
            do
              if [ -f "$script_path" ]; then
                echo "Making $script_path executable..."
                chmod +x "$script_path"
                ls -la "$script_path"
              else
                echo "Error: Script not found: $script_path"
                echo "Current directory structure:"
                find . -type f -name "*.sh"
                exit 1
              fi
            done

            # Set proper permissions for all files
            echo "Running set-permissions.sh..."
            ./scripts/set-permissions.sh

            # Create or update network
            if ! docker network inspect ${{ env.NETWORK_NAME }} >/dev/null 2>&1; then
              echo "Creating Docker network ${{ env.NETWORK_NAME }}..."
              docker network create ${{ env.NETWORK_NAME }} --subnet=172.18.0.0/16
            fi

            # Start services with fixed container names
            echo "Starting services..."
            docker compose -f docker-compose.prod.yml up -d --force-recreate

            # Wait for containers to be healthy
            echo "Waiting for containers to be healthy..."
            for container in ${{ env.API_CONTAINER }} ${{ env.POSTGRES_CONTAINER }} ${{ env.REDIS_CONTAINER }} ${{ env.REDIS_COMMANDER_CONTAINER }}; do
              echo "Waiting for $container to be healthy..."
              for i in {1..30}; do
                if docker ps --filter "name=$container" --format "{{.Status}}" | grep -q "healthy"; then
                  echo "$container is healthy"
                  break
                fi
                if [ $i -eq 30 ]; then
                  echo "Error: $container failed to become healthy"
                  exit 1
                fi
                echo "Attempt $i/30: Waiting for $container to be healthy..."
                sleep 10
              done
            done

            # Update Nginx configuration
            echo "Updating Nginx configuration..."
            cd nginx
            ./deploy-nginx.sh

            # Verify Nginx configuration
            if ! sudo nginx -t; then
              echo "Error: Nginx configuration test failed"
              exit 1
            fi

            # Restart Nginx
            echo "Restarting Nginx..."
            sudo systemctl restart nginx

            # Verify Nginx is running
            if ! sudo systemctl is-active --quiet nginx; then
              echo "Error: Failed to start Nginx"
              exit 1
            fi

            # Update current deployment symlink
            cd ${{ env.DEPLOY_PATH }}
            ln -sfn releases/${{ github.sha }} current

            echo "Deployment completed successfully!"

  post-deployment-verification:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Verify domain and SSL
        run: |
          echo "Verifying domain and SSL configuration..."

          # Check DNS resolution
          if ! nslookup ${{ env.DOMAIN }} > /dev/null 2>&1; then
            echo "Error: Domain ${{ env.DOMAIN }} is not resolving"
            exit 1
          fi

          # Check SSL certificate
          echo "Checking SSL certificate..."
          if ! openssl s_client -connect ${{ env.DOMAIN }}:443 -servername ${{ env.DOMAIN }} < /dev/null 2>&1 | grep -q "Verify return code: 0"; then
            echo "Error: SSL certificate verification failed"
            exit 1
          fi

          # Check SSL certificate expiry
          expiry=$(echo | openssl s_client -servername ${{ env.DOMAIN }} -connect ${{ env.DOMAIN }}:443 2>/dev/null | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
          if [ ! -z "$expiry" ]; then
            expiry_sec=$(date -d "$expiry" +%s)
            now_sec=$(date +%s)
            days_left=$(( ($expiry_sec - $now_sec) / 86400 ))
            if [ $days_left -lt 30 ]; then
              echo "Warning: SSL certificate will expire in $days_left days"
            fi
          fi

      - name: Verify Nginx configuration
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -e

            echo "Verifying Nginx configuration..."

            # Check Nginx configuration syntax
            if ! sudo nginx -t; then
              echo "Error: Nginx configuration test failed"
              exit 1
            fi

            # Check Nginx is running
            if ! systemctl is-active --quiet nginx; then
              echo "Error: Nginx is not running"
              exit 1
            fi

            # Check SSL certificate paths and permissions
            for file in /etc/nginx/ssl/api.ishswami.in.key /etc/nginx/ssl/api.ishswami.in.crt; do
              if [ ! -f "$file" ]; then
                echo "Error: SSL file $file not found"
                exit 1
              fi
              
              perms=$(stat -c "%a" $file)
              if [[ $file == *.key && $perms != "600" ]]; then
                echo "Error: Incorrect permissions on $file"
                exit 1
              elif [[ $file == *.crt && $perms != "644" ]]; then
                echo "Error: Incorrect permissions on $file"
                exit 1
              fi
            done

            # Check Nginx virtual host configuration
            if [ ! -f "/etc/nginx/conf.d/api.ishswami.in.conf" ]; then
              echo "Error: Nginx virtual host configuration not found"
              exit 1
            fi

            # Check SSL configuration in Nginx
            if ! grep -q "ssl_certificate" /etc/nginx/conf.d/api.ishswami.in.conf || \
               ! grep -q "ssl_certificate_key" /etc/nginx/conf.d/api.ishswami.in.conf; then
              echo "Error: SSL configuration missing in Nginx"
              exit 1
            fi

      - name: Verify application health
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -e

            echo "Verifying application health..."

            # Check API health endpoint
            if ! curl -k -s https://${{ env.DOMAIN }}/health | grep -q "ok"; then
              echo "Error: API health check failed"
              exit 1
            fi

            # Check Redis Commander
            if ! curl -k -s https://${{ env.DOMAIN }}:8082 | grep -q "Redis Commander"; then
              echo "Error: Redis Commander health check failed"
              exit 1
            fi

            # Check database connection
            if ! docker exec ${{ env.DEPLOY_PATH }}/current/postgres pg_isready -U postgres; then
              echo "Error: Database health check failed"
              exit 1
            fi

            # Check Redis connection
            if ! docker exec ${{ env.DEPLOY_PATH }}/current/redis redis-cli ping | grep -q "PONG"; then
              echo "Error: Redis health check failed"
              exit 1
            fi

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment_id }},
              state: status,
              environment: 'production'
            });

  rollback:
    if: failure() && (needs.deploy.result == 'failure' || needs.post-deployment-verification.result == 'failure')
    needs: [deploy, post-deployment-verification, create-deployment]
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}

            if [ -f backups/latest_backup ]; then
              timestamp=$(cat backups/latest_backup)
              echo "Rolling back to backup from $timestamp"

              # Stop current services
              if [ -d "current" ]; then
                cd current
                docker compose -f docker-compose.prod.yml down --remove-orphans || true
                cd ..
              fi

              # Clean up Docker resources
              echo "Cleaning up Docker resources..."
              docker system prune -f
              docker volume prune -f
              docker network prune -f

              # Restore from backup
              rm -rf current
              cp -r backups/$timestamp current/

              # Start services from backup
              cd current
              docker compose -f docker-compose.prod.yml up -d

              # Wait for services to be healthy
              echo "Waiting for services to be healthy..."
              attempt=1
              max_attempts=30
              while [ $attempt -le $max_attempts ]; do
                if curl -k -s https://localhost:8088/health | grep -q "ok"; then
                  echo "API service is healthy"
                  break
                fi
                echo "Attempt $attempt/$max_attempts: Waiting for API service..."
                sleep 10
                attempt=$((attempt + 1))
              done

              if [ $attempt -gt $max_attempts ]; then
                echo "Error: API service failed to become healthy after rollback"
                docker compose -f docker-compose.prod.yml logs api
                exit 1
              fi

              echo "Rollback completed successfully"
            else
              echo "No backup found for rollback"
              exit 1
            fi

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment_id }},
              state: status,
              environment: 'production'
            });
