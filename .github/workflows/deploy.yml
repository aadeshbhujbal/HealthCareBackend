name: Deploy Healthcare Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  actions: read
  deployments: write

env:
  DOCKER_COMPOSE_VERSION: v2.20.2
  SERVER_HOST: api.ishswami.in
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DEPLOY_PATH: /var/www/healthcare/backend
  IMAGE_NAME: healthcare-backend
  SERVER_IP: 82.208.20.16

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test -- --passWithNoTests

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker build -t $DOCKERHUB_USERNAME/healthcare-backend:latest .
          docker push $DOCKERHUB_USERNAME/healthcare-backend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: "docker-compose.prod.yml,.env.production,nginx/,init-scripts/"
          target: ${{ env.DEPLOY_PATH }}
          strip_components: 0
          overwrite: true

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}

            # Login to Docker Hub
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            # Create required directories
            mkdir -p logs init-scripts nginx/conf.d

            # Create docker network if not exists
            docker network create nginx-proxy || true

            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull

            # Stop current deployment (if exists)
            docker-compose -f docker-compose.prod.yml down --remove-orphans || true

            # Start new deployment
            DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME docker-compose -f docker-compose.prod.yml up -d

            # Wait for services to be healthy with timeout
            timeout=300
            start_time=$(date +%s)

            while true; do
              current_time=$(date +%s)
              elapsed=$((current_time - start_time))
              
              if [ $elapsed -gt $timeout ]; then
                echo "Timeout waiting for services to be healthy"
                exit 1
              fi
              
              if docker ps | grep -q "healthcarebackend-api-1.*healthy"; then
                break
              fi
              
              echo "Waiting for services to be healthy... ($elapsed seconds elapsed)"
              sleep 10
            done

            # Verify API health with retry
            max_retries=5
            retry_count=0

            while [ $retry_count -lt $max_retries ]; do
              if curl -f http://localhost:8088/health; then
                echo "API health check passed!"
                exit 0
              fi
              
              retry_count=$((retry_count + 1))
              echo "API health check failed, retrying ($retry_count/$max_retries)..."
              sleep 10
            done

            echo "API health check failed after $max_retries attempts"
            exit 1

  rollback:
    if: failure() && github.event_name == 'push'
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          envs: DOCKERHUB_USERNAME
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}

            echo "Starting rollback procedure..."

            # Get the previous image with proper filtering
            PREV_IMAGE=$(docker images $DOCKERHUB_USERNAME/healthcare-backend --format "{{.ID}} {{.CreatedAt}}" | sort -k2 -r | awk 'NR==2{print $1}')

            if [ -z "$PREV_IMAGE" ]; then
              echo "No previous image found for rollback"
              exit 1
            fi

            echo "Rolling back to previous image: $PREV_IMAGE"

            # Stop current deployment
            docker-compose -f docker-compose.prod.yml down --remove-orphans || true

            # Start with previous image
            docker tag $PREV_IMAGE $DOCKERHUB_USERNAME/healthcare-backend:latest
            DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME docker-compose -f docker-compose.prod.yml up -d

            # Wait for services with timeout
            timeout=300
            start_time=$(date +%s)

            while true; do
              current_time=$(date +%s)
              elapsed=$((current_time - start_time))
              
              if [ $elapsed -gt $timeout ]; then
                echo "Timeout waiting for rollback services to be healthy"
                exit 1
              fi
              
              if docker ps | grep -q "healthcarebackend-api-1.*healthy"; then
                echo "Rollback successful - services are healthy"
                break
              fi
              
              echo "Waiting for rollback services to be healthy... ($elapsed seconds elapsed)"
              sleep 10
            done

            # Verify API health after rollback
            if curl -f http://localhost:8088/health; then
              echo "Rollback successful - API is healthy"
              exit 0
            else
              echo "Rollback failed - API health check failed"
              exit 1
            fi
