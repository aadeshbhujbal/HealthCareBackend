name: Deploy Healthcare Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  actions: read
  deployments: write

env:
  DOCKER_COMPOSE_VERSION: v2.20.2
  SERVER_HOST: api.ishswami.in
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DEPLOY_PATH: /var/www/healthcare/backend
  SERVER_IP: 82.208.20.16
  DOMAIN: api.ishswami.in
  FRONTEND_DOMAIN: ishswami.in
  SSL_EMAIL: aadeshbhujbal99@gmail.com
  NODE_ENV: production

jobs:
  pre-deployment-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check domain DNS
        run: |
          echo "Checking DNS for ${{ env.DOMAIN }}..."
          if ! nslookup ${{ env.DOMAIN }} > /dev/null 2>&1; then
            echo "Warning: Domain ${{ env.DOMAIN }} DNS resolution failed"
            echo "Please ensure domain is properly configured"
          fi

      - name: Check server connectivity and resources
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            echo "Checking system resources..."
            df -h
            free -m
            docker system df

            echo "Checking Docker status..."
            if ! docker info > /dev/null 2>&1; then
              echo "Docker is not running!"
              exit 1
            fi

            echo "Checking required ports..."
            for port in 8088 5432 6379 8082; do
              if netstat -tuln | grep -q ":$port "; then
                echo "Warning: Port $port is already in use"
                netstat -tuln | grep ":$port "
              fi
            done

            echo "Checking disk space..."
            DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
            if [ "$DISK_USAGE" -gt 85 ]; then
              echo "Warning: Disk usage is above 85%"
              df -h /
            fi

  create-deployment:
    needs: [pre-deployment-check]
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
    steps:
      - name: Create GitHub deployment
        id: create_deployment
        uses: actions/github-script@v6
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.id;

  deploy:
    needs: create-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fix file permissions
        run: |
          chmod +x nginx/deploy-nginx.sh
          git add nginx/deploy-nginx.sh
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -m "chore: Make deploy-nginx.sh executable" || true

      - name: Create backup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p backups/$timestamp
            if [ -d "current" ]; then
              cp -r current/* backups/$timestamp/
              echo $timestamp > backups/latest_backup
            fi

      - name: Prepare SSL files
        run: |
          # Verify SSL files exist
          for file in nginx/ssl/ishswami.com.pem nginx/ssl/ishswami.com.key; do
            if [ ! -f "$file" ]; then
              echo "Error: SSL file $file not found"
              exit 1
            fi
          done

          mkdir -p ssl_temp
          # Copy the certificates with correct names for both domains
          cp nginx/ssl/ishswami.com.pem ssl_temp/ishswami.in.crt
          cp nginx/ssl/ishswami.com.pem ssl_temp/api.ishswami.in.crt
          cp nginx/ssl/ishswami.com.key ssl_temp/ishswami.in.key
          cp nginx/ssl/ishswami.com.key ssl_temp/api.ishswami.in.key

      - name: Copy SSL certificates
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: "ssl_temp/*"
          target: "/tmp/ssl-temp"
          strip_components: 1

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: "."
          target: "${{ env.DEPLOY_PATH }}/releases/${{ github.sha }}"
          strip_components: 0
          overwrite: true
          rm: false

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          command_timeout: "30m"
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}/releases/${{ github.sha }}

            # Clear npm cache and remove node_modules if they exist
            echo "Cleaning up previous builds..."
            rm -rf node_modules
            npm cache clean --force

            # Start Docker services with build args to speed up build
            echo "Starting Docker services..."
            DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker compose -f docker-compose.prod.yml build --no-cache --parallel
            docker compose -f docker-compose.prod.yml up -d

            echo "Waiting for initial service startup (30s)..."
            sleep 30

            # Setup Nginx configuration
            echo "Setting up Nginx configuration..."
            sudo mkdir -p /etc/nginx/ssl
            sudo mkdir -p /etc/nginx/conf.d
            sudo mkdir -p /var/log/nginx

            # Ensure www-data user exists
            if ! id -u www-data > /dev/null 2>&1; then
              sudo useradd -r -s /sbin/nologin www-data
            fi

            # Set proper ownership
            sudo chown -R www-data:www-data /var/log/nginx

            # Copy new nginx configuration
            sudo cp -f nginx/nginx.conf /etc/nginx/nginx.conf || true
            sudo cp -f nginx/conf.d/*.conf /etc/nginx/conf.d/ || true

            # Setup SSL
            echo "Setting up SSL..."
            if [ -d "/tmp/ssl-temp" ]; then
              sudo cp -f /tmp/ssl-temp/* /etc/nginx/ssl/ || echo "No SSL files found in temp directory"
              rm -rf /tmp/ssl-temp
            fi

            # Set SSL permissions
            echo "Setting SSL permissions..."
            sudo find /etc/nginx/ssl/ -type f -name "*.crt" -exec chmod 644 {} \; || true
            sudo find /etc/nginx/ssl/ -type f -name "*.key" -exec chmod 600 {} \; || true
            sudo chmod 755 /etc/nginx/ssl
            sudo chown -R root:root /etc/nginx/ssl

            # Wait for services to be healthy
            echo "Waiting for services to be healthy..."
            timeout=360
            start_time=$(date +%s)

            while true; do
              current_time=$(date +%s)
              elapsed=$((current_time - start_time))
              
              if [ $elapsed -ge $timeout ]; then
                echo "Timeout waiting for services to be healthy"
                exit 1
              fi
              
              if docker compose -f docker-compose.prod.yml ps | grep -q "healthy"; then
                echo "Services are healthy"
                break
              else
                echo "Waiting for services to be healthy... (${elapsed}s elapsed)"
                sleep 10
              fi
            done

            # Test and reload Nginx
            echo "Testing Nginx configuration..."
            if sudo nginx -t; then
              echo "Reloading Nginx..."
              sudo systemctl reload nginx || sudo systemctl restart nginx
              echo "Nginx configuration updated successfully"
            else
              echo "Nginx configuration test failed"
              exit 1
            fi

            # Verify API health
            echo "Verifying API health..."
            if curl -f http://localhost:8088/health; then
              echo "API is responding correctly"
            else
              echo "API health check failed"
              exit 1
            fi

            # Update current symlink
            echo "Updating current symlink..."
            ln -sfn ${{ env.DEPLOY_PATH }}/releases/${{ github.sha }} ${{ env.DEPLOY_PATH }}/current

            # Keep only last 5 releases
            cd releases
            ls -t | tail -n +6 | xargs rm -rf

            echo "Deployment successful!"

  rollback:
    if: failure() && needs.deploy.result == 'failure'
    needs: [deploy, create-deployment]
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.DEPLOY_PATH }}

            if [ -f backups/latest_backup ]; then
              timestamp=$(cat backups/latest_backup)
              echo "Rolling back to backup from $timestamp"

              # Stop current services
              cd current
              docker compose -f docker-compose.prod.yml down --remove-orphans || true

              # Restore from backup
              cd ${{ env.DEPLOY_PATH }}
              rm -rf current
              cp -r backups/$timestamp current/

              # Start services from backup
              cd current
              docker compose -f docker-compose.prod.yml up -d

              echo "Rollback completed successfully"
            else
              echo "No backup found for rollback"
              exit 1
            fi

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment_id }},
              state: status,
              environment: 'production'
            });
