name: Deploy Healthcare Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_COMPOSE_VERSION: v2.20.2
  DEPLOY_PATH: /var/www/healthcare/backend
  SERVER_IP: 82.208.20.16
  DOMAIN: api.ishswami.in
  FRONTEND_DOMAIN: ishswami.in

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/healthcare-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/healthcare-api:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/healthcare-api:latest
          cache-to: type=inline

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          envs: GITHUB_SHA
          script: |
            set -e
            echo "Starting deployment process..."

            # Create required directories
            mkdir -p ${{ env.DEPLOY_PATH }}/{releases,ssl,logs}
            cd ${{ env.DEPLOY_PATH }}

            # Create new release directory
            RELEASE_DIR="releases/$GITHUB_SHA"
            mkdir -p $RELEASE_DIR
            cd $RELEASE_DIR

            # Clone repository
            git clone git@github.com:${{ github.repository }}.git .

            # Copy SSL certificates
            cp /etc/nginx/ssl/${{ env.DOMAIN }}.* ssl/

            # Set deployment SHA in environment
            export DEPLOY_SHA=$GITHUB_SHA

            # Pull and start containers using .env.production
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml --env-file .env.production up -d

            # Wait for containers to be healthy
            echo "Waiting for containers to be healthy..."
            for i in {1..30}; do
              if docker compose -f docker-compose.prod.yml ps | grep -q "health: healthy"; then
                HEALTHY=true
                break
              fi
              echo "Attempt $i/30: Waiting for containers to be healthy..."
              sleep 10
            done

            if [ "$HEALTHY" != "true" ]; then
              echo "Health check failed. Running rollback..."
              bash rollback.sh
              exit 1
            fi

            # Deploy Nginx configuration
            cd nginx
            bash deploy-nginx.sh

            # Update current symlink
            cd ${{ env.DEPLOY_PATH }}
            ln -sfn $RELEASE_DIR current

            # Cleanup old releases (keep last 5)
            cd releases
            ls -1t | tail -n +6 | xargs -r rm -rf

            echo "Deployment completed successfully!"

      - name: Verify Deployment
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            # Verify Nginx configuration
            nginx -t

            # Check application health
            curl -k -s https://${{ env.DOMAIN }}/health

            # Check SSL certificates
            openssl x509 -noout -dates -in /etc/nginx/ssl/${{ env.DOMAIN }}.crt

            # Check container status
            docker ps | grep ${{ github.sha }}

  rollback:
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Execute Rollback
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd ${{ env.DEPLOY_PATH }}
            bash rollback.sh
