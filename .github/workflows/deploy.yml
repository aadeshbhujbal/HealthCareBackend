name: Deploy Healthcare Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_COMPOSE_VERSION: v2.20.2
  DEPLOY_PATH: /var/www/healthcare/backend
  SERVER_IP: 82.208.20.16
  DOMAIN: api.ishswami.in
  FRONTEND_DOMAIN: ishswami.in

jobs:
  build-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check Docker Build
        run: |
          echo "Running Docker build with progress output..."
          docker buildx build \
            --progress=plain \
            --load \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/healthcare-api:test \
            .

          echo "Verifying image..."
          if ! docker image inspect ${{ secrets.DOCKERHUB_USERNAME }}/healthcare-api:test >/dev/null 2>&1; then
            echo "Failed to build Docker image"
            exit 1
          fi

  pre-deploy-check:
    needs: build-check
    runs-on: ubuntu-latest
    steps:
      - name: Check Domain DNS
        run: |
          echo "Checking DNS for ${{ env.DOMAIN }}..."
          if ! nslookup ${{ env.DOMAIN }} > /dev/null 2>&1; then
            echo "Warning: Domain ${{ env.DOMAIN }} DNS resolution failed"
            exit 1
          fi

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

          # Test SSH connection
          if ! ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ env.SERVER_IP }} "echo 'SSH connection successful'"; then
            echo "SSH connection failed"
            exit 1
          fi

      - name: Verify Server Connectivity
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Check system resources
            echo "Checking system resources..."
            df -h
            free -m
            docker system df

            # Verify Docker status
            if ! docker info > /dev/null 2>&1; then
              echo "Docker is not running!"
              exit 1
            fi

            # Check required ports
            echo "Checking required ports..."
            for port in 80 443 8088 5432 6379; do
              if netstat -tuln | grep -q ":$port "; then
                echo "Port $port is in use"
              fi
            done

            # Verify SSL directory
            echo "Checking SSL configuration..."
            if [ ! -d "/etc/nginx/ssl" ]; then
              mkdir -p /etc/nginx/ssl
              chmod 755 /etc/nginx/ssl
            fi

            # Check Nginx installation
            if ! command -v nginx > /dev/null 2>&1; then
              echo "Nginx not installed. Installing..."
              apt-get update && apt-get install -y nginx
            fi

  deploy:
    needs: [build-check, pre-deploy-check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup SSH for Git
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/healthcare-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/healthcare-api:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/healthcare-api:latest
          cache-to: type=inline

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            set -e
            echo "Starting deployment process..."

            # Create required directories
            mkdir -p ${{ env.DEPLOY_PATH }}/{releases,ssl,logs}
            cd ${{ env.DEPLOY_PATH }}

            # Create new release directory
            RELEASE_DIR="releases/$GITHUB_SHA"
            mkdir -p $RELEASE_DIR
            cd $RELEASE_DIR

            # Copy repository files directly
            echo "Copying repository files..."
            rsync -av --delete /tmp/repo/ ./

            # Setup SSL certificates
            echo "Setting up SSL certificates..."
            mkdir -p ssl
            cp /etc/nginx/ssl/${{ env.DOMAIN }}.* ssl/
            chmod 644 ssl/${{ env.DOMAIN }}.crt
            chmod 600 ssl/${{ env.DOMAIN }}.key

            # Set deployment SHA in environment
            export DEPLOY_SHA=$GITHUB_SHA

            # Stop any existing containers
            if [ -d "../current" ]; then
              cd ../current
              docker compose -f docker-compose.prod.yml down || true
              cd ../$RELEASE_DIR
            fi

            # Pull and start containers using .env.production
            echo "Starting containers..."
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml --env-file .env.production up -d

            # Wait for containers to be healthy
            echo "Waiting for containers to be healthy..."
            for i in {1..30}; do
              if docker compose -f docker-compose.prod.yml ps | grep -q "health: healthy"; then
                HEALTHY=true
                break
              fi
              echo "Attempt $i/30: Waiting for containers to be healthy..."
              sleep 10
            done

            if [ "$HEALTHY" != "true" ]; then
              echo "Health check failed. Running rollback..."
              bash rollback.sh
              exit 1
            fi

            # Update current symlink
            cd ${{ env.DEPLOY_PATH }}
            ln -sfn $RELEASE_DIR current

            # Cleanup old releases (keep last 5)
            cd releases
            ls -1t | tail -n +6 | xargs -r rm -rf

            echo "Deployment completed successfully!"

      - name: Verify Deployment
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "Running comprehensive deployment verification..."

            # Verify Nginx configuration and service
            echo "Checking Nginx..."
            nginx -t
            systemctl is-active --quiet nginx || (echo "Nginx is not running" && exit 1)

            # Check SSL certificates
            echo "Checking SSL certificates..."
            if ! openssl x509 -noout -dates -in /etc/nginx/ssl/${{ env.DOMAIN }}.crt; then
              echo "SSL certificate verification failed"
              exit 1
            fi

            # Verify domain resolution
            echo "Verifying domain resolution..."
            if ! curl -k -I https://${{ env.DOMAIN }} 2>/dev/null | grep -q "HTTP/"; then
              echo "Domain is not accessible"
              exit 1
            fi

            # Check API health endpoint
            echo "Checking API health..."
            if ! curl -k -s https://${{ env.DOMAIN }}/health | grep -q "ok"; then
              echo "API health check failed"
              exit 1
            fi

            # Verify all containers are running
            echo "Verifying containers..."
            CONTAINERS="api postgres redis"
            for container in $CONTAINERS; do
              if ! docker ps | grep -q "${DEPLOY_SHA:-latest}-$container"; then
                echo "Container $container is not running"
                exit 1
              fi
            done

            # Check container logs for errors
            echo "Checking container logs..."
            for container in $CONTAINERS; do
              if docker logs ${DEPLOY_SHA:-latest}-$container 2>&1 | grep -i "error"; then
                echo "Found errors in $container logs"
                docker logs ${DEPLOY_SHA:-latest}-$container
              fi
            done

            echo "All verification checks passed successfully!"

  rollback:
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Execute Rollback
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd ${{ env.DEPLOY_PATH }}
            bash rollback.sh
