generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "postgresql" // Or your database
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  SUPER_ADMIN
  CLINIC_ADMIN
  DOCTOR
  PATIENT
  RECEPTIONIST
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  CASH
}

enum QueueStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
}

enum HealthRecordType {
  LAB_TEST
  XRAY
  MRI
  PRESCRIPTION
  DIAGNOSIS_REPORT
  PULSE_DIAGNOSIS // Added
}

enum NotificationType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum AppointmentType {
  IN_PERSON
  VIRTUAL
}

enum Dosha {
  VATA
  PITTA
  KAPHA
}

enum Prakriti {
  VATA_PITTA
  PITTA_KAPHA
  VATA_KAPHA
  TRIDOSHA
  VATA
  PITTA
  KAPHA
}

enum MedicineType {
  CLASSICAL
  PROPRIETARY
  HERBAL
}

// Models

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  name           String // Add this required field
  age            Int // Add this required field
  firstName      String
  lastName       String
  phone          String    @unique
  role           Role      @default(PATIENT)
  profilePicture String?
  gender         Gender?
  dateOfBirth    DateTime?
  address        String?
  city           String?
  state          String?
  country        String?
  zipCode        String?
  isVerified     Boolean   @default(false)
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  Doctor        Doctor?
  Patient       Patient?
  Receptionist  Receptionist?
  ClinicAdmin   ClinicAdmin?
  SuperAdmin    SuperAdmin?
  notifications Notification[]
  auditLogs     AuditLog[]
}

model Receptionist {
  id        String   @id @default(uuid())
  userId    String   @unique // Link to the User model
  clinicId  String? // Receptionist might work at one or more clinics. Make it optional.
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  clinic  Clinic?  @relation(fields: [clinicId], references: [id]) // Make clinic relation optional
  clinics Clinic[] @relation("ReceptionistsAtClinic") // Many-to-many with Clinic
}

model Clinic {
  id            String         @id @default(uuid())
  name          String
  address       String
  phone         String
  createdAt     DateTime       @default(now())
  doctors       DoctorClinic[]
  admins        ClinicAdmin[]
  receptionists Receptionist[] @relation("ReceptionistsAtClinic")
  Receptionist  Receptionist[]
}

model SuperAdmin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model ClinicAdmin {
  id        String   @id @default(uuid())
  userId    String   @unique
  clinicId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  clinic Clinic @relation(fields: [clinicId], references: [id])
}

model Doctor {
  id              String   @id @default(uuid())
  userId          String   @unique
  specialization  String
  experience      Int
  qualification   String?
  consultationFee Float?
  rating          Float?   @default(0.0)
  isAvailable     Boolean  @default(true)
  workingHours    Json?
  createdAt       DateTime @default(now())

  user          User           @relation(fields: [userId], references: [id])
  appointments  Appointment[]
  clinics       DoctorClinic[]
  prescriptions Prescription[]
  healthRecords HealthRecord[]
  reviews       Review[] // Doctor Reviews
}

model Patient {
  id        String    @id @default(uuid())
  userId    String    @unique
  prakriti  Prakriti?
  dosha     Dosha?
  createdAt DateTime  @default(now())

  user          User           @relation(fields: [userId], references: [id])
  appointments  Appointment[]
  healthRecords HealthRecord[]
  reviews       Review[] // Patient Reviews
  Prescription  Prescription[]
}

model Appointment {
  id          String            @id @default(uuid())
  patientId   String
  doctorId    String
  status      AppointmentStatus @default(PENDING)
  type        AppointmentType   @default(IN_PERSON)
  reason      String?
  symptoms    String?
  therapyId   String?
  scheduledAt DateTime
  rescheduled Boolean           @default(false)
  createdAt   DateTime          @default(now())

  patient Patient  @relation(fields: [patientId], references: [id])
  doctor  Doctor   @relation(fields: [doctorId], references: [id])
  therapy Therapy? @relation(fields: [therapyId], references: [id])
  payment Payment?
  queue   Queue?
}

model Therapy {
  id           String        @id @default(uuid())
  name         String
  description  String?
  duration     Int?
  createdAt    DateTime      @default(now())
  appointments Appointment[]
}

model Prescription {
  id        String             @id @default(uuid())
  patientId String
  doctorId  String
  date      DateTime           @default(now())
  notes     String?
  items     PrescriptionItem[]

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])
}

model PrescriptionItem {
  id             String  @id @default(uuid())
  prescriptionId String
  medicineId     String?
  dosage         String?
  frequency      String?
  duration       String?

  medicine     Medicine?    @relation(fields: [medicineId], references: [id])
  prescription Prescription @relation(fields: [prescriptionId], references: [id])
}

model Medicine {
  id                String             @id @default(uuid())
  name              String
  ingredients       String?
  properties        String?
  dosage            String?
  manufacturer      String?
  type              MedicineType
  prescriptionItems PrescriptionItem[]
}

model DoctorClinic {
  doctorId  String
  clinicId  String
  startTime DateTime?
  endTime   DateTime?
  doctor    Doctor    @relation(fields: [doctorId], references: [id])
  clinic    Clinic    @relation(fields: [clinicId], references: [id])

  @@id([doctorId, clinicId])
}

model Payment {
  id            String        @id @default(uuid())
  appointmentId String        @unique
  amount        Float
  currency      String        @default("INR")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  createdAt     DateTime      @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model Queue {
  id                String      @id @default(uuid())
  appointmentId     String      @unique
  queueNumber       Int
  estimatedWaitTime Int?
  status            QueueStatus @default(WAITING)
  updatedAt         DateTime    @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model Notification {
  id        String             @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean            @default(false)
  sentAt    DateTime?
  status    NotificationStatus @default(PENDING)
  createdAt DateTime           @default(now())

  user User @relation(fields: [userId], references: [id])
}

model HealthRecord {
  id         String           @id @default(uuid())
  patientId  String
  doctorId   String
  recordType HealthRecordType
  report     String?
  fileUrl    String?
  createdAt  DateTime         @default(now())

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  ipAddress String?
  device    String?

  user User @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0) // Example validation
  comment   String?
  patientId String
  doctorId  String
  createdAt DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])
}
