generator client {
  provider      = "prisma-client-js"
  output        = "../../../../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  name              String
  age               Int
  firstName         String?
  lastName          String?
  phone             String?
  role              Role           @default(PATIENT)
  profilePicture    String?
  gender            String?
  dateOfBirth       DateTime?
  address           String?
  city              String?
  state             String?
  country           String?
  zipCode           String?
  isVerified        Boolean        @default(false)
  lastLogin         DateTime?
  lastLoginIP       String?
  lastLoginDevice   String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  auditLogs         AuditLog[]
  notifications     Notification[]
  doctor            Doctor?
  patient           Patient?
  receptionist      Receptionist?
  clinicAdmin       ClinicAdmin?
  superAdmin        SuperAdmin?
  passwordChangedAt DateTime?
  appointments      Appointment[]
  googleId          String?
  facebookId        String?
  appleId           String?
  Clinic            Clinic[]

  @@map("users")
}

model Receptionist {
  id        String   @id @default(uuid())
  userId    String   @unique
  clinicId  String?
  createdAt DateTime @default(now())
  clinic    Clinic?  @relation(fields: [clinicId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  clinics   Clinic[] @relation("ReceptionistsAtClinic")
}

model Clinic {
  id                   String           @id @default(uuid())
  clinicId             String           @unique // Format: CL0001
  name                 String
  address              String
  phone                String
  email                String           @unique
  app_name             String           @unique
  db_connection_string String           @unique
  databaseName         String           @unique
  databaseStatus       DatabaseStatus   @default(CREATING)
  databaseCreatedAt    DateTime?
  databaseLastSync     DateTime?
  isActive             Boolean          @default(true)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  admins               ClinicAdmin[]
  doctors              DoctorClinic[]
  Receptionist         Receptionist[]
  receptionists        Receptionist[]   @relation("ReceptionistsAtClinic")
  locations            ClinicLocation[]
  createdBy            String
  createdByUser        User             @relation(fields: [createdBy], references: [id])
  subdomain            String?          @unique
  logo                 String?
  website              String?
  description          String?
  timezone             String?          @default("UTC")
  currency             String?          @default("INR")
  language             String?          @default("en")
  settings             Json?
  Appointment          Appointment[]

  @@map("clinics")
}

model ClinicLocation {
  id           String         @id @default(uuid())
  locationId   String         @unique // Format: LOC0001
  name         String
  address      String
  city         String
  state        String
  country      String
  zipCode      String?
  phone        String?
  email        String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  clinicId     String
  clinic       Clinic         @relation(fields: [clinicId], references: [id])
  latitude     Float?
  longitude    Float?
  timezone     String?        @default("UTC")
  workingHours Json?
  settings     Json?
  Appointment  Appointment[]
  DoctorClinic DoctorClinic[]

  @@map("clinic_locations")
}

model SuperAdmin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ClinicAdmin {
  id        String   @id @default(uuid())
  userId    String   @unique
  clinicId  String
  createdAt DateTime @default(now())
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  isOwner   Boolean  @default(false)
}

model Doctor {
  id              String         @id @default(uuid())
  userId          String         @unique
  specialization  String
  experience      Int
  qualification   String?
  consultationFee Float?
  rating          Float?         @default(0.0)
  isAvailable     Boolean        @default(true)
  workingHours    Json?
  createdAt       DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id])
  appointments    Appointment[]
  clinics         DoctorClinic[]
  healthRecords   HealthRecord[]
  prescriptions   Prescription[]
  reviews         Review[]
}

model Patient {
  id            String         @id @default(uuid())
  userId        String         @unique
  prakriti      Prakriti?
  dosha         Dosha?
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  appointments  Appointment[]
  healthRecords HealthRecord[]
  prescriptions Prescription[]
  reviews       Review[]
}

model Appointment {
  id          String            @id @default(uuid())
  type        AppointmentType
  doctorId    String
  patientId   String
  locationId  String
  clinicId    String // Added for clinic-specific appointments
  date        DateTime
  time        String
  duration    Int
  status      AppointmentStatus
  notes       String?
  checkInTime String?
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  therapyId   String?

  doctor   Doctor         @relation(fields: [doctorId], references: [id])
  patient  Patient        @relation(fields: [patientId], references: [id])
  location ClinicLocation @relation(fields: [locationId], references: [id])
  clinic   Clinic         @relation(fields: [clinicId], references: [id])
  user     User           @relation(fields: [userId], references: [id])
  therapy  Therapy?       @relation(fields: [therapyId], references: [id])
  payment  Payment?
  queue    Queue?

  @@index([doctorId])
  @@index([patientId])
  @@index([locationId])
  @@index([clinicId])
  @@index([userId])
}

model Therapy {
  id           String        @id @default(uuid())
  name         String
  description  String?
  duration     Int?
  createdAt    DateTime      @default(now())
  appointments Appointment[]
}

model Prescription {
  id        String             @id @default(uuid())
  patientId String
  doctorId  String
  date      DateTime           @default(now())
  notes     String?
  doctor    Doctor             @relation(fields: [doctorId], references: [id])
  patient   Patient            @relation(fields: [patientId], references: [id])
  items     PrescriptionItem[]
}

model PrescriptionItem {
  id             String       @id @default(uuid())
  prescriptionId String
  medicineId     String?
  dosage         String?
  frequency      String?
  duration       String?
  medicine       Medicine?    @relation(fields: [medicineId], references: [id])
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
}

model Medicine {
  id                String             @id @default(uuid())
  name              String
  ingredients       String?
  properties        String?
  dosage            String?
  manufacturer      String?
  type              MedicineType
  prescriptionItems PrescriptionItem[]
}

model DoctorClinic {
  doctorId   String
  clinicId   String
  startTime  DateTime?
  endTime    DateTime?
  clinic     Clinic          @relation(fields: [clinicId], references: [id])
  doctor     Doctor          @relation(fields: [doctorId], references: [id])
  locationId String?
  location   ClinicLocation? @relation(fields: [locationId], references: [id])

  @@id([doctorId, clinicId])
}

model Payment {
  id            String         @id @default(uuid())
  appointmentId String         @unique
  amount        Float
  status        PaymentStatus  @default(PENDING)
  method        PaymentMethod?
  transactionId String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointment   Appointment    @relation(fields: [appointmentId], references: [id], map: "payment_appointment_fkey")

  @@index([appointmentId], map: "payment_appointment_idx")
}

model Queue {
  id                String      @id @default(uuid())
  appointmentId     String      @unique
  queueNumber       Int
  estimatedWaitTime Int?
  status            QueueStatus @default(WAITING)
  updatedAt         DateTime    @updatedAt
  appointment       Appointment @relation(fields: [appointmentId], references: [id])
}

model Notification {
  id        String             @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean            @default(false)
  sentAt    DateTime?
  status    NotificationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id])
}

model HealthRecord {
  id         String           @id @default(uuid())
  patientId  String
  doctorId   String
  recordType HealthRecordType
  report     String?
  fileUrl    String?
  createdAt  DateTime         @default(now())
  doctor     Doctor           @relation(fields: [doctorId], references: [id])
  patient    Patient          @relation(fields: [patientId], references: [id])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  timestamp   DateTime @default(now())
  ipAddress   String?
  device      String?
  description String   @default("")
  user        User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  comment   String?
  patientId String
  doctorId  String
  createdAt DateTime @default(now())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  category    String
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Log {
  id        String   @id @default(uuid())
  type      String
  level     String
  message   String
  context   String
  metadata  String?
  timestamp DateTime @default(now())

  @@map("logs")
}

enum Role {
  SUPER_ADMIN
  CLINIC_ADMIN
  DOCTOR
  PATIENT
  RECEPTIONIST
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  SCHEDULED // Initial state when appointment is booked
  CHECKED_IN // When user scans QR code
  CONFIRMED // After check-in is verified
  IN_PROGRESS // When doctor starts consultation
  COMPLETED // After consultation
  CANCELLED // If cancelled
  NO_SHOW // If patient doesn't show up
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NET_BANKING
}

enum QueueStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
}

enum HealthRecordType {
  LAB_TEST
  XRAY
  MRI
  PRESCRIPTION
  DIAGNOSIS_REPORT
  PULSE_DIAGNOSIS
}

enum NotificationType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum AppointmentType {
  IN_PERSON
  VIDEO_CALL
  HOME_VISIT
}

enum Dosha {
  VATA
  PITTA
  KAPHA
}

enum Prakriti {
  VATA
  PITTA
  KAPHA
  VATA_PITTA
  PITTA_KAPHA
  VATA_KAPHA
  TRIDOSHA
}

enum MedicineType {
  CLASSICAL
  PROPRIETARY
  HERBAL
}

enum DatabaseStatus {
  CREATING
  ACTIVE
  ERROR
  MIGRATING
  DISABLED
}
