generator client {
  provider      = "prisma-client-js"
  output        = "../../../../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  name              String
  age               Int
  firstName         String?
  lastName          String?
  phone             String?
  role              Role           @default(PATIENT)
  profilePicture    String?
  gender            String?
  dateOfBirth       DateTime?
  address           String?
  city              String?
  state             String?
  country           String?
  zipCode           String?
  isVerified        Boolean        @default(false)
  lastLogin         DateTime?
  lastLoginIP       String?
  lastLoginDevice   String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  auditLogs         AuditLog[]
  notifications     Notification[]
  doctor            Doctor?
  patient           Patient?
  receptionist      Receptionist?
  clinicAdmin       ClinicAdmin?
  superAdmin        SuperAdmin?
  passwordChangedAt DateTime?
  appointments      Appointment[]
  googleId          String?
  facebookId        String?
  appleId           String?

  @@map("users")
}

model Receptionist {
  id        String   @id @default(uuid())
  userId    String   @unique
  clinicId  String?
  createdAt DateTime @default(now())
  clinic    Clinic?  @relation(fields: [clinicId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  clinics   Clinic[] @relation("ReceptionistsAtClinic")
}

model Clinic {
  id            String         @id @default(uuid())
  name          String
  address       String
  phone         String
  createdAt     DateTime       @default(now())
  admins        ClinicAdmin[]
  doctors       DoctorClinic[]
  Receptionist  Receptionist[]
  receptionists Receptionist[] @relation("ReceptionistsAtClinic")
}

model SuperAdmin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ClinicAdmin {
  id        String   @id @default(uuid())
  userId    String   @unique
  clinicId  String
  createdAt DateTime @default(now())
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Doctor {
  id              String         @id @default(uuid())
  userId          String         @unique
  specialization  String
  experience      Int
  qualification   String?
  consultationFee Float?
  rating          Float?         @default(0.0)
  isAvailable     Boolean        @default(true)
  workingHours    Json?
  createdAt       DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id])
  appointments    Appointment[]
  clinics         DoctorClinic[]
  healthRecords   HealthRecord[]
  prescriptions   Prescription[]
  reviews         Review[]
}

model Patient {
  id            String         @id @default(uuid())
  userId        String         @unique
  prakriti      Prakriti?
  dosha         Dosha?
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  appointments  Appointment[]
  healthRecords HealthRecord[]
  prescriptions Prescription[]
  reviews       Review[]
}

model Appointment {
  id        String            @id @default(uuid())
  patientId String
  doctorId  String
  status    AppointmentStatus @default(PENDING)
  type      AppointmentType   @default(IN_PERSON)
  date      DateTime
  time      String
  duration  Int               @default(30)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  payment   Payment?
  doctor    Doctor            @relation(fields: [doctorId], references: [id])
  patient   Patient           @relation(fields: [patientId], references: [id])
  therapy   Therapy?          @relation(fields: [therapyId], references: [id])
  therapyId String?
  queue     Queue?
  User      User?             @relation(fields: [userId], references: [id])
  userId    String?

  @@index([patientId], name: "appointment_patient_idx")
  @@index([doctorId], name: "appointment_doctor_idx")
}

model Therapy {
  id           String        @id @default(uuid())
  name         String
  description  String?
  duration     Int?
  createdAt    DateTime      @default(now())
  appointments Appointment[]
}

model Prescription {
  id        String             @id @default(uuid())
  patientId String
  doctorId  String
  date      DateTime           @default(now())
  notes     String?
  doctor    Doctor             @relation(fields: [doctorId], references: [id])
  patient   Patient            @relation(fields: [patientId], references: [id])
  items     PrescriptionItem[]
}

model PrescriptionItem {
  id             String       @id @default(uuid())
  prescriptionId String
  medicineId     String?
  dosage         String?
  frequency      String?
  duration       String?
  medicine       Medicine?    @relation(fields: [medicineId], references: [id])
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
}

model Medicine {
  id                String             @id @default(uuid())
  name              String
  ingredients       String?
  properties        String?
  dosage            String?
  manufacturer      String?
  type              MedicineType
  prescriptionItems PrescriptionItem[]
}

model DoctorClinic {
  doctorId  String
  clinicId  String
  startTime DateTime?
  endTime   DateTime?
  clinic    Clinic    @relation(fields: [clinicId], references: [id])
  doctor    Doctor    @relation(fields: [doctorId], references: [id])

  @@id([doctorId, clinicId])
}

model Payment {
  id            String         @id @default(uuid())
  appointmentId String         @unique
  amount        Float
  status        PaymentStatus  @default(PENDING)
  method        PaymentMethod?
  transactionId String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointment   Appointment    @relation(fields: [appointmentId], references: [id], map: "payment_appointment_fkey")

  @@index([appointmentId], map: "payment_appointment_idx")
}

model Queue {
  id                String      @id @default(uuid())
  appointmentId     String      @unique
  queueNumber       Int
  estimatedWaitTime Int?
  status            QueueStatus @default(WAITING)
  updatedAt         DateTime    @updatedAt
  appointment       Appointment @relation(fields: [appointmentId], references: [id])
}

model Notification {
  id        String             @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean            @default(false)
  sentAt    DateTime?
  status    NotificationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id])
}

model HealthRecord {
  id         String           @id @default(uuid())
  patientId  String
  doctorId   String
  recordType HealthRecordType
  report     String?
  fileUrl    String?
  createdAt  DateTime         @default(now())
  doctor     Doctor           @relation(fields: [doctorId], references: [id])
  patient    Patient          @relation(fields: [patientId], references: [id])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  timestamp   DateTime @default(now())
  ipAddress   String?
  device      String?
  description String   @default("")
  user        User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  comment   String?
  patientId String
  doctorId  String
  createdAt DateTime @default(now())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  category    String
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  SUPER_ADMIN
  CLINIC_ADMIN
  DOCTOR
  PATIENT
  RECEPTIONIST
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NET_BANKING
}

enum QueueStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
}

enum HealthRecordType {
  LAB_TEST
  XRAY
  MRI
  PRESCRIPTION
  DIAGNOSIS_REPORT
  PULSE_DIAGNOSIS
}

enum NotificationType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum AppointmentType {
  IN_PERSON
  VIDEO_CALL
  HOME_VISIT
}

enum Dosha {
  VATA
  PITTA
  KAPHA
}

enum Prakriti {
  VATA
  PITTA
  KAPHA
  VATA_PITTA
  PITTA_KAPHA
  VATA_KAPHA
  TRIDOSHA
}

enum MedicineType {
  CLASSICAL
  PROPRIETARY
  HERBAL
}
